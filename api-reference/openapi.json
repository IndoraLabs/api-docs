{
  "openapi": "3.0.1",
  "info": {
    "title": "Indora Labs API",
    "description": "API documentation for Indora Labs. Includes endpoints for search, file upload, file management, redactions, and video detections.",
    "license": {
      "name": "Proprietary"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.indoralabs.com"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/search/semantic": {
      "post": {
        "description": "Perform hybrid semantic + keyword search across uploaded files. Supports case/file/date filters.",
        "requestBody": {
          "description": "Search parameters",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Search results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/upload/init": {
      "post": {
        "description": "Start an S3 upload session. Returns signed URL for single PUT or multipart UploadId.",
        "requestBody": {
          "description": "Upload initialization parameters",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadInitRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Upload initialization response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadInitResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server misconfiguration (e.g., bucket not configured)"
          }
        }
      }
    },
    "/upload/sign-part": {
      "get": {
        "description": "Generate signed URL for a multipart upload chunk.",
        "parameters": [
          { "name": "key", "in": "query", "schema": { "type": "string" }, "required": true },
          { "name": "uploadIdS3", "in": "query", "schema": { "type": "string" }, "required": true },
          { "name": "partNumber", "in": "query", "schema": { "type": "integer" }, "required": true }
        ],
        "responses": {
          "200": {
            "description": "Signed URL response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "url": { "type": "string" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/upload/complete": {
      "post": {
        "description": "Finalize upload, persist File row, optionally link to a case, enqueue parsing/embedding.",
        "requestBody": {
          "description": "Completion parameters",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadCompleteRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Upload completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": { "type": "boolean" },
                    "file": { "$ref": "#/components/schemas/File" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/files": {
      "get": {
        "description": "List files with optional filters (status, caseId, search).",
        "parameters": [
          { "name": "search", "in": "query", "schema": { "type": "string" } },
          { "name": "status", "in": "query", "schema": { "type": "string", "enum": ["pending", "relevant", "irrelevant", "redacted"] } },
          { "name": "caseId", "in": "query", "schema": { "type": "string", "format": "uuid" } },
          { "name": "limit", "in": "query", "schema": { "type": "integer" } },
          { "name": "offset", "in": "query", "schema": { "type": "integer" } }
        ],
        "responses": {
          "200": {
            "description": "File list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "files": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/File" }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/files/{id}": {
      "get": {
        "description": "Get details for a single file, including flags/case links.",
        "parameters": [
          { "name": "id", "in": "path", "schema": { "type": "string", "format": "uuid" }, "required": true }
        ],
        "responses": {
          "200": {
            "description": "File details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "file": { "$ref": "#/components/schemas/File" }
                  }
                }
              }
            }
          },
          "404": { "description": "File not found" }
        }
      },
      "patch": {
        "description": "Update file metadata (status, tags, department, relevancy, etc.).",
        "parameters": [
          { "name": "id", "in": "path", "schema": { "type": "string", "format": "uuid" }, "required": true }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/FilePatch" }
            }
          }
        },
        "responses": {
          "200": { "description": "File updated", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/File" } } } },
          "404": { "description": "File not found" }
        }
      }
    },
    "/files/attach": {
      "post": {
        "description": "Attach files to a case.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/FileAttach" }
            }
          }
        },
        "responses": { "200": { "description": "Attached" } }
      }
    },
    "/files/detach": {
      "post": {
        "description": "Detach files from a case.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/FileAttach" }
            }
          }
        },
        "responses": { "200": { "description": "Detached" } }
      }
    },
    "/files/{id}/flags": {
      "post": {
        "description": "Create a redaction flag for a file.",
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Flag" }
            }
          }
        },
        "responses": { "201": { "description": "Flag created" } }
      }
    },
    "/files/flags/{flagId}": {
      "patch": {
        "description": "Update a redaction flag.",
        "parameters": [
          { "name": "flagId", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/FlagPatch" }
            }
          }
        },
        "responses": { "200": { "description": "Flag updated" }, "404": { "description": "Flag not found" } }
      },
      "delete": {
        "description": "Delete a redaction flag.",
        "parameters": [
          { "name": "flagId", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }
        ],
        "responses": { "204": { "description": "Deleted" } }
      }
    },
    "/files/{id}/signed-url": {
      "get": {
        "description": "Generate signed URL to preview/download file.",
        "parameters": [
          { "name": "id", "in": "path", "schema": { "type": "string", "format": "uuid" }, "required": true },
          { "name": "variant", "in": "query", "schema": { "type": "string", "enum": ["original", "parsed"] } },
          { "name": "expires", "in": "query", "schema": { "type": "integer" } }
        ],
        "responses": { "200": { "description": "Signed URL" }, "404": { "description": "Not found" } }
      }
    },
    "/files/{fileId}/redact": {
      "post": {
        "description": "Launch redaction job for a file.",
        "parameters": [
          { "name": "fileId", "in": "path", "schema": { "type": "string", "format": "uuid" }, "required": true }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RedactRequest" }
            }
          }
        },
        "responses": {
          "202": { "description": "Redaction job started", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RedactJob" } } } }
        }
      }
    },
    "/files/{fileId}/redaction/status": {
      "get": {
        "description": "Check redaction status.",
        "parameters": [
          { "name": "fileId", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }
        ],
        "responses": { "200": { "description": "Status response" } }
      }
    },
    "/files/{fileId}/redaction/signed-url": {
      "get": {
        "description": "Get signed URL for redacted file.",
        "parameters": [
          { "name": "fileId", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }
        ],
        "responses": { "200": { "description": "Signed URL" }, "404": { "description": "Not found" } }
      }
    },
    "/files/{fileId}/redactions": {
      "get": {
        "description": "Get redaction boxes for a file.",
        "parameters": [{ "name": "fileId", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }],
        "responses": { "200": { "description": "Redactions" } }
      },
      "patch": {
        "description": "Overwrite redactions in bulk.",
        "parameters": [{ "name": "fileId", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }],
        "requestBody": { "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RedactionBoxes" } } } },
        "responses": { "200": { "description": "Redactions updated" } }
      }
    },
    "/files/{fileId}/redactions/finalize": {
      "post": {
        "description": "Finalize redactions on a file.",
        "parameters": [{ "name": "fileId", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }],
        "responses": { "200": { "description": "Redactions finalized" }, "404": { "description": "File not found" } }
      }
    },
    "/video-detections": {
      "get": {
        "description": "List detection runs for a tenant.",
        "parameters": [
          { "name": "limit", "in": "query", "schema": { "type": "integer" } },
          { "name": "offset", "in": "query", "schema": { "type": "integer" } }
        ],
        "responses": { "200": { "description": "Detection list" } }
      },
      "post": {
        "description": "Create new detection run.",
        "requestBody": { "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DetectionRequest" } } } },
        "responses": { "202": { "description": "Detection job queued" } }
      }
    },
    "/video-detections/file/{fileId}": {
      "get": {
        "description": "Get all detection runs for a file.",
        "parameters": [{ "name": "fileId", "in": "path", "schema": { "type": "string", "format": "uuid" }, "required": true }],
        "responses": { "200": { "description": "Detections" } }
      }
    },
    "/video-detections/{id}": {
      "get": {
        "description": "Get a single detection run.",
        "parameters": [{ "name": "id", "in": "path", "schema": { "type": "string", "format": "uuid" }, "required": true }],
        "responses": { "200": { "description": "Detection" }, "404": { "description": "Not found" } }
      },
      "patch": {
        "description": "Update detections or case assignment.",
        "parameters": [{ "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }],
        "requestBody": { "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DetectionPatch" } } } },
        "responses": { "200": { "description": "Detection updated" } }
      },
      "delete": {
        "description": "Delete a detection run.",
        "parameters": [{ "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }],
        "responses": { "204": { "description": "Deleted" } }
      }
    },
    "/video-detections/file/{fileId}/detections": {
      "get": {
        "description": "Get raw detections array for overlay rendering.",
        "parameters": [{ "name": "fileId", "in": "path", "schema": { "type": "string", "format": "uuid" }, "required": true }],
        "responses": { "200": { "description": "Detections array" } }
      }
    }
  },
  "components": {
    "schemas": {
      "SearchRequest": {
        "type": "object",
        "properties": {
          "q": { "type": "string" },
          "caseId": { "type": "string", "format": "uuid" },
          "fileId": { "type": "string", "format": "uuid" },
          "limit": { "type": "integer" },
          "dateFrom": { "type": "string", "format": "date-time" },
          "dateTo": { "type": "string", "format": "date-time" }
        }
      },
      "SearchResponse": {
        "type": "object",
        "properties": {
          "results": { "type": "array", "items": { "$ref": "#/components/schemas/SearchResult" } }
        }
      },
      "SearchResult": {
        "type": "object",
        "properties": {
          "fileId": { "type": "string" },
          "snippet": { "type": "string" },
          "score": { "type": "number" },
          "metadata": { "type": "object" }
        }
      },
      "UploadInitRequest": {
        "type": "object",
        "properties": {
          "filename": { "type": "string" },
          "contentType": { "type": "string" },
          "sizeBytes": { "type": "integer" }
        }
      },
      "UploadInitResponse": {
        "type": "object",
        "properties": {
          "mode": { "type": "string", "enum": ["single", "multipart"] },
          "uploadId": { "type": "string" },
          "key": { "type": "string" },
          "putUrl": { "type": "string" },
          "uploadIdS3": { "type": "string" }
        }
      },
      "UploadCompleteRequest": {
        "type": "object",
        "properties": {
          "uploadId": { "type": "string" },
          "key": { "type": "string" },
          "uploadIdS3": { "type": "string" },
          "parts": { "type": "array", "items": { "type": "object" } },
          "etag": { "type": "string" },
          "caseId": { "type": "string", "format": "uuid" }
        }
      },
      "File": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "name": { "type": "string" },
          "status": { "type": "string" },
          "tags": { "type": "array", "items": { "type": "string" } },
          "caseIds": { "type": "array", "items": { "type": "string" } }
        }
      },
      "FilePatch": {
        "type": "object",
        "properties": {
          "reviewStatus": { "type": "string" },
          "department": { "type": "string" },
          "tags": { "type": "array", "items": { "type": "string" } },
          "relevancyScore": { "type": "integer" },
          "pages": { "type": "integer" },
          "duration": { "type": "integer" }
        }
      },
      "FileAttach": {
        "type": "object",
        "properties": {
          "caseId": { "type": "string" },
          "fileIds": { "type": "array", "items": { "type": "string" } }
        }
      },
      "Flag": {
        "type": "object",
        "properties": {
          "kind": { "type": "string" },
          "reason": { "type": "string" },
          "approved": { "type": "boolean" },
          "timestamp": { "type": "integer" },
          "coordinates": { "type": "object" }
        }
      },
      "FlagPatch": {
        "type": "object",
        "properties": {
          "kind": { "type": "string" },
          "reason": { "type": "string" },
          "approved": { "type": "boolean" }
        }
      },
      "RedactRequest": {
        "type": "object",
        "properties": {
          "targets": { "type": "string" },
          "sampleFps": { "type": "integer" }
        }
      },
      "RedactJob": {
        "type": "object",
        "properties": {
          "ok": { "type": "boolean" },
          "jobId": { "type": "string" },
          "status": { "type": "string" },
          "outputS3Uri": { "type": "string" }
        }
      },
      "RedactionBoxes": {
        "type": "object",
        "properties": {
          "boxes": {
            "type": "array",
            "items": { "type": "object" }
          }
        }
      },
      "DetectionRequest": {
        "type": "object",
        "properties": {
          "fileId": { "type": "string" },
          "caseId": { "type": "string" },
          "docId": { "type": "string" },
          "detections": { "type": "array", "items": { "type": "object" } },
          "detectEntities": { "type": "array", "items": { "type": "object" } }
        }
      },
      "DetectionPatch": {
        "type": "object",
        "properties": {
          "detections": { "type": "array", "items": { "type": "object" } },
          "caseId": { "type": "string" }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "error": { "type": "string" },
          "message": { "type": "string" }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
